package Polygons;

import java.awt.Toolkit;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
/**
 *************************************************************
 * File name   PolyGUI.java
 * @author     Boram Kim
 * Created on  01/23/2017
 * @version    1.1
 * Platform    PC, Centos 7, Netbeans IDE 8.2, jdk 1.8.0_111
 * @see java.awt.DateFormat
 * @see java.text.DecimalFormat
 * @see java.text.NumberFormat
 * @see java.awt.Toolkit
 * @see java.text.SimpleDateFormat
 * @see java.util.Date
 * @see javax.swing.JOptionPane
 * 
 *************************************************************
 * <pre><b>
 * This program examines a regular polygon's various measures. 
 * That is, tt takes input values of number and length of 
 * sides of a polygon, and calculates: interior angle, 
 * circumradius, apothem, perimeter and area of the polygon, 
 * circumference and area of circumcircle, and lastly, the 
 * percentage of error in perimeter. Some values are calculated 
 * up to the eighth decimal place, and some others in nondecimal 
 * integer. 
 * This program is also enable to print the result with print
 * button.
 * </pre></b>
 *************************************************************
 * Input   Number of sides and length of each sides of 
 *         a polygon.
 * Output  Measure of interior angle; circumradius; apothem;
 *         perimeter of polygon; area of polygon; 
 *         circumference of circumcircle; area of 
 *         circumcircle; % error in perimeter.
 *************************************************************
 
 /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
 * <pre>  
 *   Class          polyGUI  
 *   File           polyGUI.java  
 *   Description    Calculates various values about regular polygons  
 *   Environment    PC,  Centos 7, Netbeans IDE 8.2, jdk 1.8.0_111  
 *   Date           01/23/2017  
 *   @version       1.2  
 *   @author        Boram Kim  
 *   History Log    01/23/2017 Finished version 1.0
 *                  01/24/2017 Added title bar icon and tool tip text
 *                  01/25/2017 Added print method and About page
 * </pre> *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
public class PolyGUI extends javax.swing.JFrame 
{

    /** Default constructor
     *  Creates a new form, namely polyGUI
     */
    public PolyGUI() 
    {
        initComponents(); // It creates the form
        
        // make the calulator button default mode. Invoked upon pressing Enter
        this.getRootPane().setDefaultButton(calculateJButton);
        
        // center the form
        this.setLocationRelativeTo(null);
       
        // set the cursor at the start of the number text field
        numberJTextField.requestFocus();
        
        // set current date in the title of the form
        setDate();
    }
    /**
     * Puts out current date information on the title bar
     * @see java.text.DateFormat
     * @see java.text.SimpleDateFormat
     */
    private void setDate()
    {
        DateFormat dateFormat = new SimpleDateFormat("MM/DD/YYYY");
        Date today = new Date();
        // Name to display on the application title bar
        this.setTitle("Reular Polygons - " + dateFormat.format(today));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainJPanel = new javax.swing.JPanel();
        numberJLabel = new javax.swing.JLabel();
        numberJTextField = new javax.swing.JTextField();
        lengthJLabel = new javax.swing.JLabel();
        lengthJTextField = new javax.swing.JTextField();
        interiorAngleJLabel = new javax.swing.JLabel();
        interiorAngleJTextField = new javax.swing.JTextField();
        circumradiusJLabel = new javax.swing.JLabel();
        circumradiusJTextField = new javax.swing.JTextField();
        apothemJLabel = new javax.swing.JLabel();
        apothemJTextField = new javax.swing.JTextField();
        perimeterJLabel = new javax.swing.JLabel();
        perimeterJTextField = new javax.swing.JTextField();
        areaPolyJLabel = new javax.swing.JLabel();
        areaPolyJTextField = new javax.swing.JTextField();
        circumferenceJLabel = new javax.swing.JLabel();
        circumferenceJTextField = new javax.swing.JTextField();
        areaCircumJLabel = new javax.swing.JLabel();
        areaCircumJTextField = new javax.swing.JTextField();
        errorJLabel = new javax.swing.JLabel();
        errorJTextField = new javax.swing.JTextField();
        regularPolygonsJLabel = new javax.swing.JLabel();
        buttonJPanel = new javax.swing.JPanel();
        calculateJButton = new javax.swing.JButton();
        clearJButton = new javax.swing.JButton();
        exitJButton = new javax.swing.JButton();
        printJButton = new javax.swing.JButton();
        imageJLabel = new javax.swing.JLabel();
        polygonJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        clearJMenuItem = new javax.swing.JMenuItem();
        printJMenuItem = new javax.swing.JMenuItem();
        exitJMenuItem = new javax.swing.JMenuItem();
        actionJMenu = new javax.swing.JMenu();
        helpJMenu = new javax.swing.JMenu();
        aboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(Toolkit.getDefaultToolkit().getImage(PolyGUI.class.getResource("polygonIcon.png")));
        setResizable(false);

        mainJPanel.setLayout(new java.awt.GridLayout(10, 2, 5, 5));

        numberJLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        numberJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        numberJLabel.setText("Number of Sides");
        mainJPanel.add(numberJLabel);

        numberJTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        numberJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberJTextFieldActionPerformed(evt);
            }
        });
        mainJPanel.add(numberJTextField);

        lengthJLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lengthJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lengthJLabel.setText("Length of each side");
        mainJPanel.add(lengthJLabel);

        lengthJTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        mainJPanel.add(lengthJTextField);

        interiorAngleJLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        interiorAngleJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        interiorAngleJLabel.setText("Measure of interior angle");
        mainJPanel.add(interiorAngleJLabel);

        interiorAngleJTextField.setEditable(false);
        interiorAngleJTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        mainJPanel.add(interiorAngleJTextField);

        circumradiusJLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        circumradiusJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        circumradiusJLabel.setText("Circumradius");
        mainJPanel.add(circumradiusJLabel);

        circumradiusJTextField.setEditable(false);
        circumradiusJTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        mainJPanel.add(circumradiusJTextField);

        apothemJLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        apothemJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        apothemJLabel.setText("Apothem");
        mainJPanel.add(apothemJLabel);

        apothemJTextField.setEditable(false);
        apothemJTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        mainJPanel.add(apothemJTextField);

        perimeterJLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        perimeterJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        perimeterJLabel.setText("Perimeter of polygon");
        mainJPanel.add(perimeterJLabel);

        perimeterJTextField.setEditable(false);
        perimeterJTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        mainJPanel.add(perimeterJTextField);

        areaPolyJLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        areaPolyJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        areaPolyJLabel.setText("Area of polygon");
        mainJPanel.add(areaPolyJLabel);

        areaPolyJTextField.setEditable(false);
        areaPolyJTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        mainJPanel.add(areaPolyJTextField);

        circumferenceJLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        circumferenceJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        circumferenceJLabel.setText("Circumference of circumcircle");
        mainJPanel.add(circumferenceJLabel);

        circumferenceJTextField.setEditable(false);
        circumferenceJTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        circumferenceJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circumferenceJTextFieldActionPerformed(evt);
            }
        });
        mainJPanel.add(circumferenceJTextField);

        areaCircumJLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        areaCircumJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        areaCircumJLabel.setText("Area of circumcircle");
        mainJPanel.add(areaCircumJLabel);

        areaCircumJTextField.setEditable(false);
        areaCircumJTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        mainJPanel.add(areaCircumJTextField);

        errorJLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        errorJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        errorJLabel.setText("% Error in perimeter");
        mainJPanel.add(errorJLabel);

        errorJTextField.setEditable(false);
        errorJTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        mainJPanel.add(errorJTextField);

        regularPolygonsJLabel.setFont(new java.awt.Font("Caladea", 1, 24)); // NOI18N
        regularPolygonsJLabel.setForeground(new java.awt.Color(12, 136, 115));
        regularPolygonsJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        regularPolygonsJLabel.setText("Regular Polygons");
        regularPolygonsJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        regularPolygonsJLabel.setInheritsPopupMenu(false);

        buttonJPanel.setLayout(new java.awt.GridLayout(1, 4, 5, 5));

        calculateJButton.setBackground(new java.awt.Color(186, 202, 243));
        calculateJButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        calculateJButton.setMnemonic('C');
        calculateJButton.setText("Calculate");
        calculateJButton.setToolTipText("Click to Execute Calculation");
        calculateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateJButtonActionPerformed(evt);
            }
        });
        buttonJPanel.add(calculateJButton);

        clearJButton.setBackground(new java.awt.Color(186, 202, 243));
        clearJButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        clearJButton.setMnemonic('r');
        clearJButton.setText("Clear");
        clearJButton.setToolTipText("Clear All ");
        clearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJButtonActionPerformed(evt);
            }
        });
        buttonJPanel.add(clearJButton);

        exitJButton.setBackground(new java.awt.Color(186, 202, 243));
        exitJButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        exitJButton.setMnemonic('x');
        exitJButton.setText("Exit");
        exitJButton.setToolTipText("Quit the Application");
        exitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJButtonActionPerformed(evt);
            }
        });
        buttonJPanel.add(exitJButton);

        printJButton.setBackground(new java.awt.Color(186, 202, 243));
        printJButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        printJButton.setMnemonic('P');
        printJButton.setText("Print");
        printJButton.setToolTipText("Print the Result");
        buttonJPanel.add(printJButton);

        imageJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Polygons/poly.png"))); // NOI18N

        fileJMenu.setMnemonic('F');
        fileJMenu.setText("File");
        fileJMenu.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        clearJMenuItem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        clearJMenuItem.setMnemonic('r');
        clearJMenuItem.setText("Clear");
        clearJMenuItem.setToolTipText("Clear the form");
        clearJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(clearJMenuItem);

        printJMenuItem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        printJMenuItem.setMnemonic('P');
        printJMenuItem.setText("Print");
        printJMenuItem.setToolTipText("Print the form");
        printJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printJMenuItem);

        exitJMenuItem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        exitJMenuItem.setMnemonic('x');
        exitJMenuItem.setText("Exit");
        exitJMenuItem.setToolTipText("Quit application");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        polygonJMenuBar.add(fileJMenu);

        actionJMenu.setMnemonic('t');
        actionJMenu.setText("Action");
        actionJMenu.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        polygonJMenuBar.add(actionJMenu);

        helpJMenu.setMnemonic('H');
        helpJMenu.setText("Help");
        helpJMenu.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        aboutJMenuItem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        aboutJMenuItem.setMnemonic('A');
        aboutJMenuItem.setText("About");
        aboutJMenuItem.setToolTipText("Show information about this application");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(aboutJMenuItem);

        polygonJMenuBar.add(helpJMenu);

        setJMenuBar(polygonJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(regularPolygonsJLabel)
                .addGap(186, 186, 186))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(mainJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageJLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(regularPolygonsJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .addComponent(mainJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 /**
 * clear the text fields
 * @param evt 
 */
    private void clearJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJMenuItemActionPerformed
      // Call the event handler for the clearJButton
      clearJButtonActionPerformed(evt);
      //clearJButton.doClick();
      
    }//GEN-LAST:event_clearJMenuItemActionPerformed
/**
 * print GUI 
 * @param evt   
 */
    private void printJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printJMenuItemActionPerformed
        // Print the form as GUI using the PrintUtilities class
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printJMenuItemActionPerformed
/**
 * clear all inputs/outputs in the text fields
 * @param evt 
 */
    private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJMenuItemActionPerformed
        // Call the event handler for exitJButton
        exitJButtonActionPerformed(evt);
    }//GEN-LAST:event_exitJMenuItemActionPerformed

    private void circumferenceJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circumferenceJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_circumferenceJTextFieldActionPerformed

/**
* Method  calculateJButtonActionperformed()
* Description  Gets users input, calculates, and returns values casted into 
*               string. I/) requirement and expected output
* @param  evt java.awt.event.ActionEvent
* @return calculated values in string
* @see      java.awt.event.ActionEvent
* @see      java.util.DecimalFormat
* @see      javax.sing.JOptionPane
* @throws NumberFormatException
*/
    private void calculateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateJButtonActionPerformed
        // Calculate the values
        // 0. Declare variables and constants
        
        final double ANGLE180 = 180.0;
        final int MIN_NUM_LENGTH = 2;
        final int MAX_NUM = 1000000000;
        boolean invalidNumber = false;
        boolean invalidLength = false;
        
        String errorMessage = "Please enter a positive integer greater than "
                + MIN_NUM_LENGTH + " for length of sides of polygon,"
                + " but less than " + MAX_NUM + "\n for number of sides"
                + " and a positive real number for the length of each side.";
        
        
        try
        {
            // 1. Read inputs and see if it's within valid range
            int number = Integer.parseInt(numberJTextField.getText());
            invalidNumber = (number <= MIN_NUM_LENGTH) || (number > MAX_NUM);
            double length = Integer.parseInt(lengthJTextField.getText());
            invalidLength = (length <= 0) || (length > MAX_NUM);
            
            // check if the input values are invalid and throws an exception 
            boolean invalidInputs = invalidNumber || invalidLength; 
            if (invalidInputs)
                throw new NumberFormatException();
       
            
            // 2. Process the inputs (calculation)
            
            double apothem = length / (2 * Math.tan(Math.PI / number));
            // or apothem = circumradius * Math.cos(Math.PI / number);
            
            double interiorAngle = (number - 2) * (ANGLE180 / number);
            
            //if apothem is unknown, use the formular below
            //circumradius = length / (2 * Math.sin(Math.PI / number));
            // if apothem IS known, use the formular below
            double circumradius = apothem / (Math.cos(Math.PI / number));

            double areaPoly = (1/2.0) * number * length * apothem;

            double areaCircum = Math.PI * Math.pow(circumradius, 2);

            double circumference = 2 * Math.PI * circumradius;
            
            double perimeter = number * length;

            double error = (Math.abs(circumference - perimeter) / circumference)
                            * 100;
            
            
            
            // 3. Display the output
            
            // Format the output into an int format (no decimal point)
            NumberFormat intFormat = NumberFormat.getIntegerInstance();
            // Dispalys the double value to the eighth decimal point
            DecimalFormat eightDecimal = new DecimalFormat("#,##0.########");
            
            numberJTextField.setText(intFormat.format(number));
            lengthJTextField.setText(intFormat.format(length));
            apothemJTextField.setText(eightDecimal.format(apothem));
            areaCircumJTextField.setText(eightDecimal.format(areaCircum));
            areaPolyJTextField.setText(eightDecimal.format(areaPoly));
            circumferenceJTextField.setText(eightDecimal.format(circumference));
            circumradiusJTextField.setText(intFormat.format(circumradius));
            errorJTextField.setText(eightDecimal.format(error) + " %");
            interiorAngleJTextField.setText(intFormat.format(interiorAngle));
            perimeterJTextField.setText(intFormat.format(perimeter));
         
        }
        
        catch(NumberFormatException exp)
        {
            // Throws an error message
            JOptionPane.showMessageDialog(this, errorMessage, "Invalid Data", 
                    JOptionPane.WARNING_MESSAGE);
            
            // Hightlight the invalid value text field
            // to guid the user to correct the input
          if (invalidNumber)
            {
                numberJTextField.requestFocus();
                numberJTextField.selectAll();
            }
          if (invalidLength)
            {
                lengthJTextField.requestFocus();
                lengthJTextField.selectAll();
            }            
        }
   
    }//GEN-LAST:event_calculateJButtonActionPerformed
/**
 * clear the text fields
 * @param evt 
 */
    private void clearJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJButtonActionPerformed
        // clear all inputs/outputs in the text fields
        apothemJTextField.setText("");
        areaCircumJTextField.setText("");
        areaPolyJTextField.setText("");
        circumferenceJTextField.setText("");
        circumradiusJTextField.setText("");
        errorJTextField.setText("");
        interiorAngleJTextField.setText("");
        perimeterJTextField.setText("");
        numberJTextField.setText("");
        lengthJTextField.setText("");
        // Refocus the cursur on the "Number of Polygon Sides" text field
        numberJTextField.requestFocus();
    }//GEN-LAST:event_clearJButtonActionPerformed
/**
* close the application
* @param evt 
*/
    private void exitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJButtonActionPerformed
        // close the application
        System.exit(0);
    }//GEN-LAST:event_exitJButtonActionPerformed
/**
 * Shows About page
 * @param evt 
 */
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutJMenuItemActionPerformed
        // Create an About form and show it.
        About myAbout = new About(this, true);
        myAbout.setVisible(true);
    }//GEN-LAST:event_aboutJMenuItemActionPerformed

    private void numberJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberJTextFieldActionPerformed
        // Call the Calculate button handler
        calculateJButtonActionPerformed(evt);
        //calculateJButton.doClick();
    }//GEN-LAST:event_numberJTextFieldActionPerformed

/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		main()
    *	Description	Starts the RegularPolygon application
    *	@return         void
    *	@param		args are the command line strings
    *	@author 	Boram Kim
    *	Date		01/23/2017
    *<pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/    
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PolyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PolyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PolyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PolyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() {
                new PolyGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JMenu actionJMenu;
    private javax.swing.JLabel apothemJLabel;
    private javax.swing.JTextField apothemJTextField;
    private javax.swing.JLabel areaCircumJLabel;
    private javax.swing.JTextField areaCircumJTextField;
    private javax.swing.JLabel areaPolyJLabel;
    private javax.swing.JTextField areaPolyJTextField;
    private javax.swing.JPanel buttonJPanel;
    private javax.swing.JButton calculateJButton;
    private javax.swing.JLabel circumferenceJLabel;
    private javax.swing.JTextField circumferenceJTextField;
    private javax.swing.JLabel circumradiusJLabel;
    private javax.swing.JTextField circumradiusJTextField;
    private javax.swing.JButton clearJButton;
    private javax.swing.JMenuItem clearJMenuItem;
    private javax.swing.JLabel errorJLabel;
    private javax.swing.JTextField errorJTextField;
    private javax.swing.JButton exitJButton;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JLabel imageJLabel;
    private javax.swing.JLabel interiorAngleJLabel;
    private javax.swing.JTextField interiorAngleJTextField;
    private javax.swing.JLabel lengthJLabel;
    private javax.swing.JTextField lengthJTextField;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JLabel numberJLabel;
    private javax.swing.JTextField numberJTextField;
    private javax.swing.JLabel perimeterJLabel;
    private javax.swing.JTextField perimeterJTextField;
    private javax.swing.JMenuBar polygonJMenuBar;
    private javax.swing.JButton printJButton;
    private javax.swing.JMenuItem printJMenuItem;
    private javax.swing.JLabel regularPolygonsJLabel;
    // End of variables declaration//GEN-END:variables
}
